"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NullFileFilter = (function () {
    function NullFileFilter() {
    }
    NullFileFilter.prototype.filterFiles = function (files) {
        return files;
    };
    return NullFileFilter;
}());
exports.NullFileFilter = NullFileFilter;
var SimpleFileFilter = (function () {
    function SimpleFileFilter() {
    }
    SimpleFileFilter.prototype.filterFiles = function (files) {
        return files.filter(this.checkFile, this);
    };
    return SimpleFileFilter;
}());
exports.SimpleFileFilter = SimpleFileFilter;
var FileExtensionFilter = (function (_super) {
    __extends(FileExtensionFilter, _super);
    function FileExtensionFilter(validExtensions) {
        _super.call(this);
        this.extRE = /\.([^.]+)$/;
        this.extensions = validExtensions || [];
    }
    Object.defineProperty(FileExtensionFilter.prototype, "acceptString", {
        get: function () {
            return this.extensions.join(',');
        },
        enumerable: true,
        configurable: true
    });
    FileExtensionFilter.prototype.checkExt = function (name) {
        var m = this.extRE.exec(name);
        var ext = m && m[1];
        if (ext) {
            return this.extensions.some(function (e) { return ext == e; });
        }
        else {
            return false;
        }
    };
    FileExtensionFilter.prototype.checkFile = function (f) {
        return this.checkExt(f.name);
    };
    return FileExtensionFilter;
}(SimpleFileFilter));
exports.FileExtensionFilter = FileExtensionFilter;
var MimeExtensionFilter = (function (_super) {
    __extends(MimeExtensionFilter, _super);
    function MimeExtensionFilter(mimeTypes) {
        _super.call(this);
        this.mimeTypes = mimeTypes;
    }
    MimeExtensionFilter.prototype.checkFile = function (f) {
        return this.mimeTypes.some(function (mime) { return f.type == mime; });
    };
    Object.defineProperty(MimeExtensionFilter.prototype, "acceptString", {
        get: function () {
            return this.mimeTypes.join(',');
        },
        enumerable: true,
        configurable: true
    });
    return MimeExtensionFilter;
}(SimpleFileFilter));
exports.MimeExtensionFilter = MimeExtensionFilter;
var AcceptFileFilter = (function (_super) {
    __extends(AcceptFileFilter, _super);
    function AcceptFileFilter(acceptStr) {
        _super.call(this);
        this.acceptString = acceptStr;
    }
    Object.defineProperty(AcceptFileFilter.prototype, "acceptString", {
        get: function () {
            return this._acceptStr;
        },
        set: function (str) {
            var parts = str.split(',');
            var mimes = [];
            var exts = [];
            for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                var part = parts_1[_i];
                if (part[0] == '.') {
                    exts.push(part);
                }
                else {
                    mimes.push(part);
                }
            }
            this.mime = new MimeExtensionFilter(mimes);
            this.ext = new FileExtensionFilter(exts);
        },
        enumerable: true,
        configurable: true
    });
    AcceptFileFilter.prototype.checkFile = function (f) {
        return this.mime.checkFile(f) || this.ext.checkFile(f);
    };
    return AcceptFileFilter;
}(SimpleFileFilter));
exports.AcceptFileFilter = AcceptFileFilter;

//# sourceMappingURL=maps/file-filter.js.map
