{"version":3,"sources":["file-validator.ts"],"names":[],"mappings":";AAuBA;IAAA;IAQA,CAAC;IAPG,oCAAQ,GAAR,UAAS,KAAa;QAClB,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED,uCAAW,GAAX,UAAY,KAAa;QACrB,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,wBAAC;AAAD,CARA,AAQC,IAAA;AARY,yBAAiB,oBAQ7B,CAAA;AAED;IACI,gCAAY,eAA0B;QAkB9B,UAAK,GAAW,YAAY,CAAC;QAjBjC,IAAI,CAAC,UAAU,GAAG,eAAe,IAAI,EAAE,CAAC;IAC5C,CAAC;IAED,yCAAQ,GAAR,UAAS,KAAa;QAClB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,4CAAW,GAAX,UAAY,KAAa;QACrB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,sBAAI,gDAAY;aAAhB;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC;;;OAAA;IAKO,yCAAQ,GAAhB,UAAiB,IAAY;QACzB,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,GAAG,IAAI,CAAC,EAAR,CAAQ,CAAC,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IAEO,0CAAS,GAAjB,UAAkB,CAAO;QACrB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IACL,6BAAC;AAAD,CAjCA,AAiCC,IAAA;AAjCY,8BAAsB,yBAiClC,CAAA","file":"file-validator.js","sourcesContent":["export interface FileValidator {\n    /**\n     * Return true if the array of files is acceptable.\n     */\n    validate(files: File[]): boolean;\n\n    /**\n     * Filter the files to acceptable files.\n     * If acceptable(files) returns false this should return\n     * an empty array.\n     */\n    filterFiles(files: File[]): File[];\n\n    /**\n     * A string suitable for use as the accept attribute\n     * on a file input.\n     */\n    acceptString?: string;\n}\n\n/**\n * A file checker that accepts any file.\n */\nexport class NullFileValidator implements FileValidator {\n    validate(files: File[]): boolean {\n        return files.length > 0;\n    }\n\n    filterFiles(files: File[]): File[] {\n        return files;\n    }\n}\n\nexport class FileExtensionValidator implements FileValidator {\n    constructor(validExtensions?: string[]) {\n        this.extensions = validExtensions || [];\n    }\n\n    validate(files: File[]): boolean {\n        return files.some(this.checkFile, this);\n    }\n\n    filterFiles(files: File[]): File[] {\n        return files.filter(this.checkFile, this);\n    }\n\n    get acceptString(): string {\n        return this.extensions.join(',');\n    }\n\n    extensions: string[];\n\n    private extRE: RegExp = /\\.([^.]+)$/;\n    private checkExt(name: string): boolean {\n        let m = this.extRE.exec(name);\n        let ext = m && m[1];\n        if (ext) {\n            return this.extensions.some(e => ext == e);\n        } else {\n            return false;\n        }\n    }\n\n    private checkFile(f: File): boolean {\n        return this.checkExt(f.name);\n    }\n}\n"],"sourceRoot":"/source/"}