{"version":3,"sources":["file-filter.ts"],"names":[],"mappings":"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","file":"file-filter.js","sourcesContent":["\n/**\n * An object that filters acceptable files from an array of files.\n */\nexport interface FileFilter {\n    /**\n     * Filter the files to acceptable files.\n     * If acceptable(files) returns false this should return\n     * an empty array.\n     */\n    filterFiles(files: File[]): File[];\n\n    /**\n     * A string suitable for use as the accept attribute\n     * on a file input.\n     */\n    acceptString?: string;\n}\n\n/**\n * A file checker that accepts any file.\n */\nexport class NullFileFilter implements FileFilter {\n    filterFiles(files: File[]): File[] {\n        return files;\n    }\n}\n\nexport abstract class SimpleFileFilter implements FileFilter {\n  filterFiles(files: File[]): File[] {\n    return files.filter(this.checkFile, this);\n  }\n\n  abstract checkFile(file: File): boolean\n}\n\n/**\n * A file filter that filters files that match an array of file extensions.\n */\nexport class FileExtensionFilter extends SimpleFileFilter {\n    constructor(validExtensions?: string[]) {\n      super();\n      this.extensions = validExtensions || [];\n    }\n\n  get acceptString(): string {\n    return this.extensions.join(',');\n  }\n\n  extensions: string[];\n\n  private extRE: RegExp = /\\.([^.]+)$/;\n  private checkExt(name: string): boolean {\n    let m = this.extRE.exec(name);\n    let ext = m && m[1];\n    if (ext) {\n      return this.extensions.some(e => ext == e);\n    } else {\n      return false;\n    }\n  }\n\n  checkFile(f: File): boolean {\n    return this.checkExt(f.name);\n  }\n}\n\nexport class MimeExtensionFilter extends SimpleFileFilter {\n  constructor(mimeTypes: string[]) {\n    super();\n    this.mimeTypes = mimeTypes;\n  }\n\n  checkFile(f: File): boolean {\n    return this.mimeTypes.some(mime => f.type == mime);\n  }\n\n  get acceptString(): string {\n    return this.mimeTypes.join(',');\n  }\n\n  mimeTypes: string[];\n\n}\n\nexport class AcceptFileFilter extends SimpleFileFilter {\n  constructor(acceptStr: string) {\n    super();\n    this.acceptString = acceptStr;\n  }\n\n  get acceptString(): string {\n    return this._acceptStr;\n  }\n  set acceptString(str: string) {\n    let parts = str.split(',');\n    let mimes: string[] = [];\n    let exts: string[] = [];\n    for(let part of parts) {\n      if (part[0] == '.') {\n        exts.push(part);\n      } else {\n        mimes.push(part);\n      }\n    }\n    this.mime = new MimeExtensionFilter(mimes);\n    this.ext = new FileExtensionFilter(exts);\n  }\n\n  checkFile(f: File): boolean {\n    return this.mime.checkFile(f) || this.ext.checkFile(f);\n  }\n\n  private _acceptStr: string;\n  private mime: MimeExtensionFilter;\n  private ext: FileExtensionFilter;\n}\n"],"sourceRoot":"/source/"}