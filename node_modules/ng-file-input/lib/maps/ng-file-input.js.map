{"version":3,"sources":["ng-file-input.js","file-filter.ts","file-drop-zone.directive.ts","file-input.component.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__param","paramIndex","decorator","System","register","exports_1","context_1","NullFileFilter","SimpleFileFilter","FileExtensionFilter","MimeExtensionFilter","AcceptFileFilter","id","setters","execute","filterFiles","files","filter","checkFile","_super","validExtensions","call","extRE","extensions","get","join","enumerable","configurable","checkExt","name","m","exec","ext","some","e","f","mimeTypes","mime","type","acceptStr","acceptString","_acceptStr","set","str","parts","split","mimes","exts","_i","parts_1","part","push","exports_2","context_2","defaultCanDrop","event","Array","dataTransfer","items","item","kind","core_1","file_filter_1","FileDropZoneDirective","core_1_1","file_filter_1_1","fileUpload","EventEmitter","fileDragEnter","fileDragExit","dragging","onDrop","from","emit","preventDefault","stopPropagation","onEnter","canDrop","onExit","onOver","ngOnInit","Input","Function","Output","HostListener","DragEvent","HostBinding","Directive","selector","exports_3","context_3","core_2","file_filter_2","FileInputComponent","core_2_1","file_filter_2_1","renderer","accept","multiple","disabled","onChange","input","reset","invokeElementMethod","form","nativeElement","Boolean","HTMLInputElement","ViewChild","ElementRef","Component","template","styles","Attribute","Renderer","String"],"mappings":"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","file":"ng-file-input.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nSystem.register(\"file-filter\", [], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var NullFileFilter, SimpleFileFilter, FileExtensionFilter, MimeExtensionFilter, AcceptFileFilter;\n    return {\n        setters:[],\n        execute: function() {\n            NullFileFilter = (function () {\n                function NullFileFilter() {\n                }\n                NullFileFilter.prototype.filterFiles = function (files) {\n                    return files;\n                };\n                return NullFileFilter;\n            }());\n            exports_1(\"NullFileFilter\", NullFileFilter);\n            SimpleFileFilter = (function () {\n                function SimpleFileFilter() {\n                }\n                SimpleFileFilter.prototype.filterFiles = function (files) {\n                    return files.filter(this.checkFile, this);\n                };\n                return SimpleFileFilter;\n            }());\n            exports_1(\"SimpleFileFilter\", SimpleFileFilter);\n            FileExtensionFilter = (function (_super) {\n                __extends(FileExtensionFilter, _super);\n                function FileExtensionFilter(validExtensions) {\n                    _super.call(this);\n                    this.extRE = /\\.([^.]+)$/;\n                    this.extensions = validExtensions || [];\n                }\n                Object.defineProperty(FileExtensionFilter.prototype, \"acceptString\", {\n                    get: function () {\n                        return this.extensions.join(',');\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                FileExtensionFilter.prototype.checkExt = function (name) {\n                    var m = this.extRE.exec(name);\n                    var ext = m && m[1];\n                    if (ext) {\n                        return this.extensions.some(function (e) { return ext == e; });\n                    }\n                    else {\n                        return false;\n                    }\n                };\n                FileExtensionFilter.prototype.checkFile = function (f) {\n                    return this.checkExt(f.name);\n                };\n                return FileExtensionFilter;\n            }(SimpleFileFilter));\n            exports_1(\"FileExtensionFilter\", FileExtensionFilter);\n            MimeExtensionFilter = (function (_super) {\n                __extends(MimeExtensionFilter, _super);\n                function MimeExtensionFilter(mimeTypes) {\n                    _super.call(this);\n                    this.mimeTypes = mimeTypes;\n                }\n                MimeExtensionFilter.prototype.checkFile = function (f) {\n                    return this.mimeTypes.some(function (mime) { return f.type == mime; });\n                };\n                Object.defineProperty(MimeExtensionFilter.prototype, \"acceptString\", {\n                    get: function () {\n                        return this.mimeTypes.join(',');\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                return MimeExtensionFilter;\n            }(SimpleFileFilter));\n            exports_1(\"MimeExtensionFilter\", MimeExtensionFilter);\n            AcceptFileFilter = (function (_super) {\n                __extends(AcceptFileFilter, _super);\n                function AcceptFileFilter(acceptStr) {\n                    _super.call(this);\n                    this.acceptString = acceptStr;\n                }\n                Object.defineProperty(AcceptFileFilter.prototype, \"acceptString\", {\n                    get: function () {\n                        return this._acceptStr;\n                    },\n                    set: function (str) {\n                        var parts = str.split(',');\n                        var mimes = [];\n                        var exts = [];\n                        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n                            var part = parts_1[_i];\n                            if (part[0] == '.') {\n                                exts.push(part);\n                            }\n                            else {\n                                mimes.push(part);\n                            }\n                        }\n                        this.mime = new MimeExtensionFilter(mimes);\n                        this.ext = new FileExtensionFilter(exts);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                AcceptFileFilter.prototype.checkFile = function (f) {\n                    return this.mime.checkFile(f) || this.ext.checkFile(f);\n                };\n                return AcceptFileFilter;\n            }(SimpleFileFilter));\n            exports_1(\"AcceptFileFilter\", AcceptFileFilter);\n        }\n    }\n});\nSystem.register(\"file-drop-zone.directive\", ['@angular/core', \"file-filter\"], function(exports_2, context_2) {\n    \"use strict\";\n    var __moduleName = context_2 && context_2.id;\n    var core_1, file_filter_1;\n    var FileDropZoneDirective;\n    function defaultCanDrop(event) {\n        return Array.prototype.some.call(event.dataTransfer.items, function (item) {\n            return item.kind == 'file';\n        });\n    }\n    return {\n        setters:[\n            function (core_1_1) {\n                core_1 = core_1_1;\n            },\n            function (file_filter_1_1) {\n                file_filter_1 = file_filter_1_1;\n            }],\n        execute: function() {\n            FileDropZoneDirective = (function () {\n                function FileDropZoneDirective() {\n                    this.fileUpload = new core_1.EventEmitter();\n                    this.fileDragEnter = new core_1.EventEmitter();\n                    this.fileDragExit = new core_1.EventEmitter();\n                    this.dragging = false;\n                }\n                FileDropZoneDirective.prototype.onDrop = function (event) {\n                    var files = this.filter.filterFiles(Array.from(event.dataTransfer.files));\n                    if (files.length > 0) {\n                        this.fileUpload.emit(files);\n                        this.dragging = false;\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                };\n                FileDropZoneDirective.prototype.onEnter = function (event) {\n                    if (this.canDrop(event)) {\n                        this.dragging = true;\n                        this.fileDragEnter.emit(event);\n                    }\n                };\n                FileDropZoneDirective.prototype.onExit = function (event) {\n                    if (this.dragging) {\n                        this.dragging = false;\n                        this.fileDragExit.emit(event);\n                    }\n                };\n                FileDropZoneDirective.prototype.onOver = function (event) {\n                    if (this.canDrop(event)) {\n                        event.stopPropagation();\n                        event.preventDefault();\n                    }\n                };\n                Object.defineProperty(FileDropZoneDirective.prototype, \"draggingFile\", {\n                    get: function () {\n                        return this.dragging;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                FileDropZoneDirective.prototype.ngOnInit = function () {\n                    if (!this.filter) {\n                        this.filter = new file_filter_1.NullFileFilter();\n                    }\n                    if (!this.canDrop) {\n                        this.canDrop = defaultCanDrop;\n                    }\n                };\n                __decorate([\n                    core_1.Input(\"fileFilter\"), \n                    __metadata('design:type', Object)\n                ], FileDropZoneDirective.prototype, \"filter\", void 0);\n                __decorate([\n                    core_1.Input(), \n                    __metadata('design:type', Function)\n                ], FileDropZoneDirective.prototype, \"canDrop\", void 0);\n                __decorate([\n                    core_1.Output(), \n                    __metadata('design:type', core_1.EventEmitter)\n                ], FileDropZoneDirective.prototype, \"fileUpload\", void 0);\n                __decorate([\n                    core_1.Output(), \n                    __metadata('design:type', core_1.EventEmitter)\n                ], FileDropZoneDirective.prototype, \"fileDragEnter\", void 0);\n                __decorate([\n                    core_1.Output(), \n                    __metadata('design:type', core_1.EventEmitter)\n                ], FileDropZoneDirective.prototype, \"fileDragExit\", void 0);\n                __decorate([\n                    core_1.HostListener('drop', ['$event']), \n                    __metadata('design:type', Function), \n                    __metadata('design:paramtypes', [DragEvent]), \n                    __metadata('design:returntype', void 0)\n                ], FileDropZoneDirective.prototype, \"onDrop\", null);\n                __decorate([\n                    core_1.HostListener('dragenter', ['$event']), \n                    __metadata('design:type', Function), \n                    __metadata('design:paramtypes', [DragEvent]), \n                    __metadata('design:returntype', void 0)\n                ], FileDropZoneDirective.prototype, \"onEnter\", null);\n                __decorate([\n                    core_1.HostListener('dragleave', ['$event']), \n                    __metadata('design:type', Function), \n                    __metadata('design:paramtypes', [DragEvent]), \n                    __metadata('design:returntype', void 0)\n                ], FileDropZoneDirective.prototype, \"onExit\", null);\n                __decorate([\n                    core_1.HostListener('dragover', ['$event']), \n                    __metadata('design:type', Function), \n                    __metadata('design:paramtypes', [DragEvent]), \n                    __metadata('design:returntype', void 0)\n                ], FileDropZoneDirective.prototype, \"onOver\", null);\n                __decorate([\n                    core_1.HostBinding('class.file-zone-dragging'), \n                    __metadata('design:type', Object)\n                ], FileDropZoneDirective.prototype, \"draggingFile\", null);\n                FileDropZoneDirective = __decorate([\n                    core_1.Directive({\n                        selector: '[fileDrop]'\n                    }), \n                    __metadata('design:paramtypes', [])\n                ], FileDropZoneDirective);\n                return FileDropZoneDirective;\n            }());\n            exports_2(\"FileDropZoneDirective\", FileDropZoneDirective);\n        }\n    }\n});\nSystem.register(\"file-input.component\", ['@angular/core', \"file-filter\"], function(exports_3, context_3) {\n    \"use strict\";\n    var __moduleName = context_3 && context_3.id;\n    var core_2, file_filter_2;\n    var FileInputComponent;\n    return {\n        setters:[\n            function (core_2_1) {\n                core_2 = core_2_1;\n            },\n            function (file_filter_2_1) {\n                file_filter_2 = file_filter_2_1;\n            }],\n        execute: function() {\n            FileInputComponent = (function () {\n                function FileInputComponent(renderer, accept) {\n                    this.renderer = renderer;\n                    this.multiple = false;\n                    this.disabled = false;\n                    this.fileUpload = new core_2.EventEmitter();\n                    this.accept = accept || '';\n                }\n                FileInputComponent.prototype.onChange = function (input) {\n                    var files = this.filter.filterFiles(Array.from(input.files));\n                    if (files.length > 0) {\n                        this.fileUpload.emit(files);\n                        this.reset();\n                    }\n                };\n                Object.defineProperty(FileInputComponent.prototype, \"acceptStr\", {\n                    get: function () {\n                        return this.filter.acceptString || this.accept;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                FileInputComponent.prototype.ngOnInit = function () {\n                    if (!this.filter) {\n                        if (this.accept) {\n                            this.filter = new file_filter_2.AcceptFileFilter(this.accept);\n                        }\n                        else {\n                            this.filter = new file_filter_2.NullFileFilter();\n                        }\n                    }\n                };\n                FileInputComponent.prototype.reset = function () {\n                    this.renderer.invokeElementMethod(this.form.nativeElement, 'reset', []);\n                };\n                __decorate([\n                    core_2.Input(), \n                    __metadata('design:type', Boolean)\n                ], FileInputComponent.prototype, \"multiple\", void 0);\n                __decorate([\n                    core_2.Input(), \n                    __metadata('design:type', Boolean)\n                ], FileInputComponent.prototype, \"disabled\", void 0);\n                __decorate([\n                    core_2.Input(\"fileFilter\"), \n                    __metadata('design:type', Object)\n                ], FileInputComponent.prototype, \"filter\", void 0);\n                __decorate([\n                    core_2.Output(), \n                    __metadata('design:type', core_2.EventEmitter)\n                ], FileInputComponent.prototype, \"fileUpload\", void 0);\n                __decorate([\n                    core_2.HostListener('change', ['$event.target']), \n                    __metadata('design:type', Function), \n                    __metadata('design:paramtypes', [HTMLInputElement]), \n                    __metadata('design:returntype', void 0)\n                ], FileInputComponent.prototype, \"onChange\", null);\n                __decorate([\n                    core_2.ViewChild('form'), \n                    __metadata('design:type', core_2.ElementRef)\n                ], FileInputComponent.prototype, \"form\", void 0);\n                FileInputComponent = __decorate([\n                    core_2.Component({\n                        selector: 'file-input, file-select',\n                        template: \"\\n<ng-content></ng-content>\\n<form #form>\\n<input type=\\\"file\\\" title=\\\" \\\" [accept]=\\\"acceptStr\\\" [attr.multiple]=\\\"multiple || null\\\" [attr.disabled]=\\\"disabled || null\\\" />\\n</form>\",\n                        styles: [\"\\n:host {\\n  display: block;\\n  position: relative;\\n}\\ninput {\\n  position: absolute;\\n  opacity: 0;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n} \"]\n                    }),\n                    __param(1, core_2.Attribute('accept')), \n                    __metadata('design:paramtypes', [core_2.Renderer, String])\n                ], FileInputComponent);\n                return FileInputComponent;\n            }());\n            exports_3(\"FileInputComponent\", FileInputComponent);\n        }\n    }\n});\n","\n/**\n * An object that filters acceptable files from an array of files.\n */\nexport interface FileFilter {\n    /**\n     * Filter the files to acceptable files.\n     * If acceptable(files) returns false this should return\n     * an empty array.\n     */\n    filterFiles(files: File[]): File[];\n\n    /**\n     * A string suitable for use as the accept attribute\n     * on a file input.\n     */\n    acceptString?: string;\n}\n\n/**\n * A file checker that accepts any file.\n */\nexport class NullFileFilter implements FileFilter {\n    filterFiles(files: File[]): File[] {\n        return files;\n    }\n}\n\nexport abstract class SimpleFileFilter implements FileFilter {\n  filterFiles(files: File[]): File[] {\n    return files.filter(this.checkFile, this);\n  }\n\n  abstract checkFile(file: File): boolean\n}\n\n/**\n * A file filter that filters files that match an array of file extensions.\n */\nexport class FileExtensionFilter extends SimpleFileFilter {\n    constructor(validExtensions?: string[]) {\n      super();\n      this.extensions = validExtensions || [];\n    }\n\n  get acceptString(): string {\n    return this.extensions.join(',');\n  }\n\n  extensions: string[];\n\n  private extRE: RegExp = /\\.([^.]+)$/;\n  private checkExt(name: string): boolean {\n    let m = this.extRE.exec(name);\n    let ext = m && m[1];\n    if (ext) {\n      return this.extensions.some(e => ext == e);\n    } else {\n      return false;\n    }\n  }\n\n  checkFile(f: File): boolean {\n    return this.checkExt(f.name);\n  }\n}\n\nexport class MimeExtensionFilter extends SimpleFileFilter {\n  constructor(mimeTypes: string[]) {\n    super();\n    this.mimeTypes = mimeTypes;\n  }\n\n  checkFile(f: File): boolean {\n    return this.mimeTypes.some(mime => f.type == mime);\n  }\n\n  get acceptString(): string {\n    return this.mimeTypes.join(',');\n  }\n\n  mimeTypes: string[];\n\n}\n\nexport class AcceptFileFilter extends SimpleFileFilter {\n  constructor(acceptStr: string) {\n    super();\n    this.acceptString = acceptStr;\n  }\n\n  get acceptString(): string {\n    return this._acceptStr;\n  }\n  set acceptString(str: string) {\n    let parts = str.split(',');\n    let mimes: string[] = [];\n    let exts: string[] = [];\n    for(let part of parts) {\n      if (part[0] == '.') {\n        exts.push(part);\n      } else {\n        mimes.push(part);\n      }\n    }\n    this.mime = new MimeExtensionFilter(mimes);\n    this.ext = new FileExtensionFilter(exts);\n  }\n\n  checkFile(f: File): boolean {\n    return this.mime.checkFile(f) || this.ext.checkFile(f);\n  }\n\n  private _acceptStr: string;\n  private mime: MimeExtensionFilter;\n  private ext: FileExtensionFilter;\n}\n","import {Directive, EventEmitter, HostBinding, HostListener,\n        Input, OnInit, Output} from '@angular/core';\n\nimport {FileFilter, NullFileFilter} from './file-filter';\n\nfunction defaultCanDrop(event: DragEvent): boolean {\n  return Array.prototype.some.call(event.dataTransfer.items, function(item: DataTransferItem) {\n    return item.kind == 'file';\n  });\n}\n\n@Directive({\n  selector: '[fileDrop]'\n})\nexport class FileDropZoneDirective implements OnInit {\n  @Input(\"fileFilter\") filter: FileFilter;\n  @Input() canDrop: (event:DragEvent) => boolean;\n\n  @Output() fileUpload: EventEmitter<File[]> = new EventEmitter();\n  @Output() fileDragEnter: EventEmitter<DragEvent> = new EventEmitter();\n  @Output() fileDragExit: EventEmitter<DragEvent> = new EventEmitter();\n\n  @HostListener('drop', ['$event']) onDrop(event: DragEvent) {\n    let files = this.filter.filterFiles(Array.from(event.dataTransfer.files));\n    if (files.length > 0) {\n      this.fileUpload.emit(files);\n      this.dragging = false;\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  @HostListener('dragenter', ['$event']) onEnter(event: DragEvent) {\n    if (this.canDrop(event)) {\n      this.dragging = true;\n      this.fileDragEnter.emit(event);\n    }\n  }\n\n  @HostListener('dragleave', ['$event']) onExit(event: DragEvent) {\n    if (this.dragging) {\n      this.dragging = false;\n      this.fileDragExit.emit(event);\n    }\n  }\n\n  @HostListener('dragover', ['$event']) onOver(event: DragEvent) {\n    if (this.canDrop(event)) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n\n  @HostBinding('class.file-zone-dragging')\n  get draggingFile() {\n    return this.dragging;\n  }\n\n  ngOnInit() {\n    if (!this.filter) {\n      this.filter = new NullFileFilter();\n    }\n    if (!this.canDrop) {\n      this.canDrop = defaultCanDrop;\n    }\n  }\n\n  private dragging: boolean = false;\n}\n","import {Attribute, Component, ElementRef, EventEmitter, HostListener, Input,\n        Output, OnInit, Renderer, ViewChild} from '@angular/core'\n\nimport {AcceptFileFilter, FileFilter, NullFileFilter} from './file-filter'\n\n@Component({\n    selector: 'file-input, file-select',\n    template: `\n<ng-content></ng-content>\n<form #form>\n<input type=\"file\" title=\" \" [accept]=\"acceptStr\" [attr.multiple]=\"multiple || null\" [attr.disabled]=\"disabled || null\" />\n</form>`,\n    styles: [`\n:host {\n  display: block;\n  position: relative;\n}\ninput {\n  position: absolute;\n  opacity: 0;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n} `]\n})\nexport class FileInputComponent implements OnInit {\n\n  constructor(\n    private renderer: Renderer,\n    @Attribute('accept') accept?: string\n  ) {\n    this.accept = accept || '';\n  }\n\n  @Input() multiple: boolean = false;\n  @Input() disabled: boolean = false;\n\n  @Input(\"fileFilter\") filter: FileFilter;\n\n  @Output() fileUpload: EventEmitter<File[]> = new EventEmitter();\n\n  @HostListener('change', ['$event.target']) onChange(input: HTMLInputElement) {\n    let files = this.filter.filterFiles(Array.from(input.files));\n    if (files.length > 0) {\n      this.fileUpload.emit(files);\n      this.reset();\n    }\n  }\n\n  get acceptStr() {\n    return this.filter.acceptString || this.accept;\n  }\n\n  ngOnInit() {\n    if (!this.filter) {\n      if (this.accept) {\n        this.filter = new AcceptFileFilter(this.accept);\n      } else {\n        this.filter = new NullFileFilter();\n      }\n    }\n  }\n\n  reset() {\n    this.renderer.invokeElementMethod(this.form.nativeElement, 'reset', []);\n  }\n\n  @ViewChild('form')\n  private form: ElementRef;\n\n  private accept: string;\n}\n"],"sourceRoot":"/source/"}