declare module "file-filter" {
    export interface FileFilter {
        filterFiles(files: File[]): File[];
        acceptString?: string;
    }
    export class NullFileFilter implements FileFilter {
        filterFiles(files: File[]): File[];
    }
    export abstract class SimpleFileFilter implements FileFilter {
        filterFiles(files: File[]): File[];
        abstract checkFile(file: File): boolean;
    }
    export class FileExtensionFilter extends SimpleFileFilter {
        constructor(validExtensions?: string[]);
        acceptString: string;
        extensions: string[];
        private extRE;
        private checkExt(name);
        checkFile(f: File): boolean;
    }
    export class MimeExtensionFilter extends SimpleFileFilter {
        constructor(mimeTypes: string[]);
        checkFile(f: File): boolean;
        acceptString: string;
        mimeTypes: string[];
    }
    export class AcceptFileFilter extends SimpleFileFilter {
        constructor(acceptStr: string);
        acceptString: string;
        checkFile(f: File): boolean;
        private _acceptStr;
        private mime;
        private ext;
    }
}
declare module "file-drop-zone.directive" {
    import { EventEmitter, OnInit } from '@angular/core';
    import { FileFilter } from "file-filter";
    export class FileDropZoneDirective implements OnInit {
        filter: FileFilter;
        canDrop: (event: DragEvent) => boolean;
        fileUpload: EventEmitter<File[]>;
        fileDragEnter: EventEmitter<DragEvent>;
        fileDragExit: EventEmitter<DragEvent>;
        onDrop(event: DragEvent): void;
        onEnter(event: DragEvent): void;
        onExit(event: DragEvent): void;
        onOver(event: DragEvent): void;
        draggingFile: boolean;
        ngOnInit(): void;
        private dragging;
    }
}
declare module "file-input.component" {
    import { EventEmitter, OnInit, Renderer } from '@angular/core';
    import { FileFilter } from "file-filter";
    export class FileInputComponent implements OnInit {
        private renderer;
        constructor(renderer: Renderer, accept?: string);
        multiple: boolean;
        disabled: boolean;
        filter: FileFilter;
        fileUpload: EventEmitter<File[]>;
        onChange(input: HTMLInputElement): void;
        acceptStr: string;
        ngOnInit(): void;
        reset(): void;
        private form;
        private accept;
    }
}
