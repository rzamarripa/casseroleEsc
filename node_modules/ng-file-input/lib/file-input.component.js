"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
var file_filter_1 = require('./file-filter');
var FileInputComponent = (function () {
    function FileInputComponent(renderer, accept) {
        this.renderer = renderer;
        this.multiple = false;
        this.disabled = false;
        this.fileUpload = new core_1.EventEmitter();
        this.accept = accept || '';
    }
    FileInputComponent.prototype.onChange = function (input) {
        var files = this.filter.filterFiles(Array.from(input.files));
        if (files.length > 0) {
            this.fileUpload.emit(files);
            this.reset();
        }
    };
    Object.defineProperty(FileInputComponent.prototype, "acceptStr", {
        get: function () {
            return this.filter.acceptString || this.accept;
        },
        enumerable: true,
        configurable: true
    });
    FileInputComponent.prototype.ngOnInit = function () {
        if (!this.filter) {
            if (this.accept) {
                this.filter = new file_filter_1.AcceptFileFilter(this.accept);
            }
            else {
                this.filter = new file_filter_1.NullFileFilter();
            }
        }
    };
    FileInputComponent.prototype.reset = function () {
        this.renderer.invokeElementMethod(this.form.nativeElement, 'reset', []);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], FileInputComponent.prototype, "multiple", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], FileInputComponent.prototype, "disabled", void 0);
    __decorate([
        core_1.Input("fileFilter"), 
        __metadata('design:type', Object)
    ], FileInputComponent.prototype, "filter", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], FileInputComponent.prototype, "fileUpload", void 0);
    __decorate([
        core_1.HostListener('change', ['$event.target']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [HTMLInputElement]), 
        __metadata('design:returntype', void 0)
    ], FileInputComponent.prototype, "onChange", null);
    __decorate([
        core_1.ViewChild('form'), 
        __metadata('design:type', core_1.ElementRef)
    ], FileInputComponent.prototype, "form", void 0);
    FileInputComponent = __decorate([
        core_1.Component({
            selector: 'file-input, file-select',
            template: "\n<ng-content></ng-content>\n<form #form>\n<input type=\"file\" title=\" \" [accept]=\"acceptStr\" [attr.multiple]=\"multiple || null\" [attr.disabled]=\"disabled || null\" />\n</form>",
            styles: ["\n:host {\n  display: block;\n  position: relative;\n}\ninput {\n  position: absolute;\n  opacity: 0;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n} "]
        }),
        __param(1, core_1.Attribute('accept')), 
        __metadata('design:paramtypes', [core_1.Renderer, String])
    ], FileInputComponent);
    return FileInputComponent;
}());
exports.FileInputComponent = FileInputComponent;

//# sourceMappingURL=maps/file-input.component.js.map
