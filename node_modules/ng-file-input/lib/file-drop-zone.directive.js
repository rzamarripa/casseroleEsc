"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var file_filter_1 = require('./file-filter');
function defaultCanDrop(event) {
    return Array.prototype.some.call(event.dataTransfer.items, function (item) {
        return item.kind == 'file';
    });
}
var FileDropZoneDirective = (function () {
    function FileDropZoneDirective() {
        this.fileUpload = new core_1.EventEmitter();
        this.fileDragEnter = new core_1.EventEmitter();
        this.fileDragExit = new core_1.EventEmitter();
        this.dragging = false;
    }
    FileDropZoneDirective.prototype.onDrop = function (event) {
        var files = this.filter.filterFiles(Array.from(event.dataTransfer.files));
        if (files.length > 0) {
            this.fileUpload.emit(files);
            this.dragging = false;
            event.preventDefault();
            event.stopPropagation();
        }
    };
    FileDropZoneDirective.prototype.onEnter = function (event) {
        if (this.canDrop(event)) {
            this.dragging = true;
            this.fileDragEnter.emit(event);
        }
    };
    FileDropZoneDirective.prototype.onExit = function (event) {
        if (this.dragging) {
            this.dragging = false;
            this.fileDragExit.emit(event);
        }
    };
    FileDropZoneDirective.prototype.onOver = function (event) {
        if (this.canDrop(event)) {
            event.stopPropagation();
            event.preventDefault();
        }
    };
    Object.defineProperty(FileDropZoneDirective.prototype, "draggingFile", {
        get: function () {
            return this.dragging;
        },
        enumerable: true,
        configurable: true
    });
    FileDropZoneDirective.prototype.ngOnInit = function () {
        if (!this.filter) {
            this.filter = new file_filter_1.NullFileFilter();
        }
        if (!this.canDrop) {
            this.canDrop = defaultCanDrop;
        }
    };
    __decorate([
        core_1.Input("fileFilter"), 
        __metadata('design:type', Object)
    ], FileDropZoneDirective.prototype, "filter", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function)
    ], FileDropZoneDirective.prototype, "canDrop", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], FileDropZoneDirective.prototype, "fileUpload", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], FileDropZoneDirective.prototype, "fileDragEnter", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], FileDropZoneDirective.prototype, "fileDragExit", void 0);
    __decorate([
        core_1.HostListener('drop', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [DragEvent]), 
        __metadata('design:returntype', void 0)
    ], FileDropZoneDirective.prototype, "onDrop", null);
    __decorate([
        core_1.HostListener('dragenter', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [DragEvent]), 
        __metadata('design:returntype', void 0)
    ], FileDropZoneDirective.prototype, "onEnter", null);
    __decorate([
        core_1.HostListener('dragleave', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [DragEvent]), 
        __metadata('design:returntype', void 0)
    ], FileDropZoneDirective.prototype, "onExit", null);
    __decorate([
        core_1.HostListener('dragover', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [DragEvent]), 
        __metadata('design:returntype', void 0)
    ], FileDropZoneDirective.prototype, "onOver", null);
    __decorate([
        core_1.HostBinding('class.file-zone-dragging'), 
        __metadata('design:type', Object)
    ], FileDropZoneDirective.prototype, "draggingFile", null);
    FileDropZoneDirective = __decorate([
        core_1.Directive({
            selector: '[fileDrop]'
        }), 
        __metadata('design:paramtypes', [])
    ], FileDropZoneDirective);
    return FileDropZoneDirective;
}());
exports.FileDropZoneDirective = FileDropZoneDirective;

//# sourceMappingURL=maps/file-drop-zone.directive.js.map
